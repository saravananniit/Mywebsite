Common feature in all prog. lang
(procedure oriented or OOP) -> Modularity

Grady Booch defines :
Modularity packages abstractions into discrete units.

Module in Js:
=============

How one Js file is used in another Js file ?

keyword : export in one Js file and import in another Js file
In the script tag, use the property, type="module"

==============================================
Ex1 : 

index.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Module</title>
</head>

<body>
    <h1>Module Demo</h1>
    <p id="demo"></p>
    <script src="./main.js" type="module"></script>
</body>

</html>
=======================================================================

person.js

// @ts-nocheck
const name="niit";
const age=18;
export {name,age};

==========================================================================
main.js

// @ts-nocheck
import {age,name} from "./person.js";

let text="my name is "+ name + ", I am "+age+".";

document.getElementById("demo").innerHTML=text;

==========================================================================
Ex2 : 

Optimize the asset :
====================
install MinifyAll using Vs code Extensions

select your main.js and click Minify the selected document and preserve the original.

This option will create a new file called.

main-min.js : removes comments and extra spaces and crunches the variable names to
reduce file size and provides same functionality.

Now instead of using     <script src="./main.js" type="module"></script>

Now use  <script src="./main-min.js" type="module"></script>


==========================================================================
Node.js is server side scripting.

difference between JavaScript vs Node 

     Js			   Node	
1. client side           server side
2. runs in browser       runs outside the browser (create server - output in browser).


syntax : node filename.js

=========================================================================
Ex3: npmjs.com (Publish and Install)
====================================
create index.js

function greet(data){
console.log("welcome " +data+" to niit");
}
greet("sam");

===================================================
test the file using node 

node index.js
==========================================================================
npm init -> used to create package.json
==========================================================================
{
  "name": "packages-venu",
  "version": "1.0.0",
  "description": "bath pattern 25",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "super,test,compile,run"
  ],
  "author": "venugopal",
  "license": "MIT"
}

Is this OK? (yes)
========================================================================================
PS D:\desktop\desktop sept 2022\Wave25\JS\NPM> npm login
=========================================================================================
PS D:\desktop\desktop sept 2022\Wave25\JS\NPM> npm pack --dry-run
=========================================================================================
PS D:\desktop\desktop sept 2022\Wave25\JS\NPM> npm publish
=========================================================================================
create folder and then install
s
PS D:\desktop\desktop sept 2022\Wave25\JS\NPM fetch> npm i test-package-niit
============================================================================================
Minification -> to reduce load times and bandwidth

live Example -> Bootstrap

<!-- JavaScript Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3" crossorigin="anonymous"></script> 

<!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">

=========================================================================================
Webpack -> bundling or bundle tool
======================================================================================
Ex4: Webpack Demo

index.html

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Pack Demo</title>
</head>

<body>
    <h1>Web Pack Demo</h1>
    <p id="one"></p>
    <p id="two"></p>
    <script src="./hello.js"></script>
    <script src="./welcome.js"></script>

</body>

</html>

=================================================================================
welcome.js

// @ts-nocheck
document.getElementById("two").innerHTML="study at NIIT";

=================================================================================
hello.js

// @ts-nocheck
document.getElementById("one").innerHTML="Hello Welcome to NIIT";
=================================================================================
to create package.json

npm init

{
  "name": "webpackdemos",
  "version": "1.0.0",
  "description": "webpack demo examples",
  "main": "hello.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "saravanan",
  "license": "MIT"
}

========================================================================================
install webpack:

command to install

npm install webpack --save -dev

or

npm install weebpack-cli --save -dev  (dev refers to development not production)

==========================================================================================
create webpack configuration file
===================================
webpack.config.js
=================
const path=require('path')
module.exports = {
    
    entry: {
      'bundle.js' :[
        path.resolve(__dirname, './welcome.js'),
        path.resolve(__dirname, './hello.js'),
        
      ]
    },
    output: {
      filename: '[name]', 
      path: path.resolve(__dirname, 'dist')
    }
};

=======================================================================================
run this command.

npx webpack

this will create a directory dist and file bundle.js is placed inside the directory
=========================================================================================
Now change the Html file 


<body>
    <h1>Web Pack Demo</h1>
    <p id="one"></p>
    <p id="two"></p>
    <!-- <script src="./hello.js"></script>
    <script src="./welcome.js"></script> -->
<script src="./dist/bundle.js"></script>
</body>

========================================================================================

Alternate way to use package.json for bundling.
===============================================
modify package.json file :

{
  "name": "webpackdemos",
  "version": "1.0.0",
  "description": "webpack demo examples",
  "main": "hello.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build" :"webpack --config=webpack.config.js"
  },
  "author": "saravanan",
  "license": "MIT",
  "dependencies": {
    "webpack-cli": "^4.10.0"
  }
}

====================================================================
Now run this command.

npm run build

You get the same output, it creates directory dist and file bundle.js inside the dist directory
======================================================================
Ex5 : install webpack plugin  
===
Run this two command at terminal.

npm install html-webpack-plugin
=============================================================
npm install clean-webpack-plugin
================================
create src folder and place one.html,hello.js and welcome.js

one.html
========
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Html</title>
</head>
<body>
    <h1>Html sample</h1>
</body>
</html>
==================================================================================
hello.js
========
// @ts-nocheck
document.getElementById("one").innerHTML="Hello Welcome to NIIT";
===================================================================================
welcome.js
==========
// @ts-nocheck
document.getElementById("two").innerHTML="study at NIIT";

====================================================================
create webpack.config.js

// @ts-nocheck
const path=require('path')
const {CleanWebpackPlugin}= require('clean-webpack-plugin')
const HtmlWebpackPlugin=require
('html-webpack-plugin')
module.exports={
mode:'production',
devtool: 'source-map',
entry:{
    'bundle.js' :[
      path.resolve(__dirname, './src/welcome.js'),
      path.resolve(__dirname, './src/hello.js'),
      
    ]
  },
output: {
    filename: '[name]', 
    path: path.resolve(__dirname, 'dist')
  },
plugins: [
new CleanWebpackPlugin(),
new HtmlWebpackPlugin({
filename: 'one.html',
inject:true,
template:path.resolve(__dirname,'src','one.html')
}),
]
}

=====================================================================
package.json
============
{
  "name": "webpackdemos",
  "version": "1.0.0",
  "description": "webpack demo examples",
  "main": "hello.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "webpack --config=webpack.config.js"
  },
  "author": "saravanan",
  "license": "MIT",
  "dependencies": {
    "clean-webpack-plugin": "^4.0.0",
    "html-webpack-plugin": "^5.5.0",
    "webpack-cli": "^4.10.0"
  }
}
=====================================================================
output : npm run build

it creates 3 files under dist folder

1. bundle.js
2. bundle.js.map
3. one.html
===========================================================================
To test
Place index.html outside src folder

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Pack Demo</title>
</head>

<body>
    <h1>Web Pack Demo</h1>
    <p id="one"></p>
    <p id="two"></p>
    <!-- <script src="./hello.js"></script>
    <script src="./welcome.js"></script> -->
<script src="./dist/bundle.js"></script>
</body>

</html>

run this file you will get same the output.

=============================================================================
ref : 

https://docs.npmjs.com/cli/v6/configuring-npm/package-json

https://webpack.js.org/

https://webpack.js.org/guides/installation/

https://webpack.js.org/plugins/html-webpack-plugin/#:~:text=The%20HtmlWebpackPlugin%20simplifies%20creation%20of%20HTML%20files%20to,using%20lodash%20templates%2C%20or%20use%20your%20own%20loader.


=====================================================================


















